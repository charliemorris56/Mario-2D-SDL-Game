#include <SDL.h>
#include <SDL_image.h>
#include <SDL_mixer.h>
#include <iostream>

#include "Constants.h"
#include "Texture2D.h"
#include "Commons.h"

using namespace std;

//Globals
SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;
SDL_Texture* gTexture = NULL;

//Function Prototypes
bool InitSDL();
void CloseSLD();
bool Update();
void Render();
SDL_Texture* LoadTextureFromFile(string path);
void FreeTexture();

int main(int argc, char* args[])	
{
	//Check if SDL was set up correctly
	if (InitSDL())
	{
		//Pause for a few seconds
		SDL_Delay(5);
	}

	//Flag to check if we wish to quit
	bool  quit = false;

	//Game Loop
	while (!quit)
	{
		Render();
		quit = Update();
	}

	//Close Window and free resources
	CloseSLD();

	return 0;
}

bool InitSDL()
{
	//Setup SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		cout << "DSL did not initialise. Error: " << SDL_GetError();
		return false;
	}
	else
	{
		//All good, so attempt to create the window
		gWindow = SDL_CreateWindow("Game Engine Creation", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);

		gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
		if (gRenderer != NULL)
		{
			//Initialise PNG loading
			int imageFlags = IMG_INIT_PNG;
			if (!(IMG_Init(imageFlags) & imageFlags))
			{
				cout << "SDL_Image could not initialise. Error: " << IMG_GetError();
				return false;
			}
		}

		//Load the background texture
		gTexture = LoadTextureFromFile("Images/test.bmp");
		if (gTexture == NULL)
		{
			return false;
		}

		//Did the window get created?
		if (gWindow == NULL)
		{
			//No
			cout << "Window was not created. Error: " << SDL_GetError();
			return false;
		}
		else
		{
			//Yes
			return true;
		}
	}
}

void CloseSLD()
{
	//Release the window
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;

	//Clear up the texutre
	FreeTexture();

	//Release the renderer
	SDL_DestroyRenderer(gRenderer);
	gRenderer = NULL;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

bool Update()
{
	//Event Handler
	SDL_Event e;

	//Get the events
	SDL_PollEvent(&e);

	//Handle any events
	switch (e.type)
	{
		//Click the 'X' to quit
	case SDL_QUIT:
		return true;
		break;
	}

	return false;
}

void Render()
{
	//Clear the screen
	SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
	SDL_RenderClear(gRenderer);

	//Set where to render the texture
	SDL_Rect renderLocation = { 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT };

	//Render to screen
	SDL_RenderCopyEx(gRenderer, gTexture, NULL, &renderLocation, 0, NULL, SDL_FLIP_NONE);

	//Update the screen
	SDL_RenderPresent(gRenderer);
}

SDL_Texture* LoadTextureFromFile(string path)
{
	//Remove the memory used for a previous texture
	FreeTexture();
	SDL_Texture* pTexture = NULL;

	//Load the image
	SDL_Surface* pSurface = IMG_Load(path.c_str());
	if (pSurface != NULL)
	{
		//Create the texture from the pixels in the surface
		pTexture = SDL_CreateTextureFromSurface(gRenderer, pSurface);
		if (pTexture == NULL)
		{
			cout << "Unable to create texture from surface. Error: " << SDL_GetError() << endl;
		}
	}

	//Remove the loaded surface now that we have the texture
	SDL_FreeSurface(pSurface);

	//Retirn the texture
	return pTexture;
}

void FreeTexture()
{
	//Check if the texture exists before removing it
	if (gTexture != NULL)
	{
		SDL_DestroyTexture(gTexture);
		gTexture = NULL;
	}
}
